# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyage2.protos.expert import expert_api_pb2 as protos_dot_expert_dot_expert__api__pb2


class ExpertAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteCommandList = channel.unary_unary(
                '/protos.expert.ExpertAPI/ExecuteCommandList',
                request_serializer=protos_dot_expert_dot_expert__api__pb2.CommandList.SerializeToString,
                response_deserializer=protos_dot_expert_dot_expert__api__pb2.CommandResultList.FromString,
                )
        self.ResolveConst = channel.unary_unary(
                '/protos.expert.ExpertAPI/ResolveConst',
                request_serializer=protos_dot_expert_dot_expert__api__pb2.ResolveConstRequest.SerializeToString,
                response_deserializer=protos_dot_expert_dot_expert__api__pb2.ResolveConstResponse.FromString,
                )


class ExpertAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteCommandList(self, request, context):
        """*
        Send a list of expert actions and facts (commands) to the AI Module. The list will be processed during the next AI tick for the specified player. If that does not occur in 5 seconds, an error code will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveConst(self, request, context):
        """*
        Experimental. Currently unsupported.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExpertAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteCommandList': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCommandList,
                    request_deserializer=protos_dot_expert_dot_expert__api__pb2.CommandList.FromString,
                    response_serializer=protos_dot_expert_dot_expert__api__pb2.CommandResultList.SerializeToString,
            ),
            'ResolveConst': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveConst,
                    request_deserializer=protos_dot_expert_dot_expert__api__pb2.ResolveConstRequest.FromString,
                    response_serializer=protos_dot_expert_dot_expert__api__pb2.ResolveConstResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protos.expert.ExpertAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExpertAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteCommandList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.expert.ExpertAPI/ExecuteCommandList',
            protos_dot_expert_dot_expert__api__pb2.CommandList.SerializeToString,
            protos_dot_expert_dot_expert__api__pb2.CommandResultList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResolveConst(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protos.expert.ExpertAPI/ResolveConst',
            protos_dot_expert_dot_expert__api__pb2.ResolveConstRequest.SerializeToString,
            protos_dot_expert_dot_expert__api__pb2.ResolveConstResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
